COMPILER MCC:
    For correct work mcc required C/C++ compiler!

    Arguments:
        -i (or first argument)  sourse file .mc
        -o  output file name (.exe)
        -cstp  stoppet compilation on C code
        -CC  set C compiler
        -CCa  set C compiler arguments ( always last argument!!! )
        -cfn  set C file name (default: a.c)
        -noref  dont put reference to errors

    Example:
        mcc -i test.mc -o test.exe -CC clang -CCa -Wall
        mcc test.mc -cstp

    How build:
        clang++ src/mcc.cpp -o mcc.exe

MACROSES:
    '~' - start of marcos, after expected name of macros as one simbol
    '!' - end of macros

    Semantic:
        ~<macros name><argument>!
        or
        ~<macros name><pre-arg>:<main-arg>!

    Types:
        ~m      main function
                    int main(int argc, char **argv)\n{\n
                    }\n
        ~I      C preprocessing include  (cant work for .mc files, only C/CPP files (see macro ~@))
                    #include <
                    >\n
        ~r      return
                    return
                    ;\n
        ~p      printf_s
                    printf_s(
                    );\n
        ~n      not
                    !(
                    )
        ~w      while loop
                    while (
                    ) {\n
                    }\n
        ~S      switch from C
                    switch (
                    ) {\n
                    }\n
        ~c      case for switch
                    case
                    :\n
        ~b      break  (declarate without '!' (~b) )
                    break;
        ~i      condition. if() from C
                    if (
                    ) {\n
                    }\n
        ~s      C structure (see 1.). After '~s' you can declarate typedeffed name in parants (see 2.);
                1.  struct
                    \n{\n
                    };\n
                2.  typedef struct
                    \n{\n
                    } <typedeffed name>;

        ~@      include .mc file in current (For Example: ~@includeded_file_name.mc!)


    Example:
        ~iiostream!

        ~           macros start
        i           macros name
        iostream    marcos argument
        !           macros end

VARIABLES:
    Semantic:
        <type><name><value>;
        or
        <type>*<name><value>;
        or
        <type><name>[<size>]<value>;

        types:
            0  - 
            1  - void
            2  - std::string
            7  - char
            8  - unsigned char
            15 - short
            16 - unsigned short
            31 - int
            32 - unsigned int

            pointers declaration with '*' simbol after type
            arrays declaration with '[]' after name
        
        name is a arbitrary alpha simbols and '_' (for exaple: var, a, b, some_var)

    Example:
        7a5;                         char a = 5;
        31test_var12;                int test_var = 12;
        31*pointer&test_var;         int* pointer = &test_var;
        31**dp&pointer;              int** dp = &pointer;
        7*test_str"Hello, world!";   char* test_str = "Hello, world!";
        7arr[10];                    char arr[10];
        7mat[3][3];                  char mat[3][3];
        15_arr[64]4,1,7;             short _arr[64] = { 4, 1, 7 };
        7*_p_arr[100];               char* _p_arr[100];
        $7a5;                        static char a = 5;

FUNCTIONS:
    Semantic:
        <type><name>(<arg1>,<arg2>...) {
            <body>
        }

DEFINES:
    Semantic:
        #<name> <value>

    Warning:
        if you use define in body MCC expected ';'
    
    Example:
        #testDef ~p"Hello"!
        ~m
          testDef  /ERROR!/
          testDef; /no error/
        !

MC FILE INCLUDE:
    file include from path of start file!!!

    Semantic:
        see macros '~@'

    Example:
        files:
            main.mc
            foo:
            - foo.mc
            - bar.mc

        main.mc:
            ~@foo/foo.mc!

        foo.mc:
            ~@foo/foo.mc